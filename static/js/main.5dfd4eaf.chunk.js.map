{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","ChatRoom","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","counter","setCounter","dummy","useRef","updateCounter","c","a","doc","set","current","sendMessage","e","preventDefault","currentUser","uid","photoURL","displayName","get","then","data","toString","text","createdAt","FieldValue","serverTimestamp","msgLimit","useEffect","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","autoFocus","placeholder","value","onChange","target","type","props","messageClass","className","src","alt","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAWAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,8CAGT,IAAMC,EAAOR,IAASQ,OAChBC,EAAYT,IAASS,YAiB3B,SAASC,IAMP,OACE,wBAAQC,QANe,WACvB,IAAMC,EAAW,IAAIZ,IAASQ,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAIrB,iCAUJ,SAASG,IAEP,IACMC,EAAcP,EAAUQ,WAAW,YAEnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAH9B,KAIjB,EAAmBC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EAAP,oBACA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAQC,mBAERC,EAAa,uCAAG,WAAMC,GAAN,SAAAC,EAAA,sEACdjB,EAAYkB,IAAI,WAAWC,IAAI,CAACC,QAASJ,IAD3B,2CAAH,sDAIbK,EAAW,uCAAG,WAAMC,GAAN,qBAAAL,EAAA,6DAClBK,EAAEC,iBADgB,EAEqB/B,EAAKgC,YAApCC,EAFU,EAEVA,IAAKC,EAFK,EAELA,SAAUC,EAFL,EAEKA,YACF3B,EAAYkB,IAAI,WACxBU,MAAMC,MAAK,SAACb,GACvBJ,EAAWI,EAAEc,OAAOV,YALJ,SAOZpB,EAAYkB,IAAIP,EAAQoB,YAAYZ,IAAI,CAC5Ca,KAAMvB,EACNwB,UAAWjD,IAASS,UAAUyC,WAAWC,kBACzCV,MACAC,WACAC,gBAZgB,OAclBjB,EAAa,IACgBK,EAAhBqB,KAAZzB,EAA0C,EAAmBA,EAAU,GAftD,2CAAH,sDAyBjB,OAPA0B,qBAAU,WAENxB,EAAMO,QAAQkB,eAAe,CAAEC,SAAU,aAG1C,CAAChC,IAGF,qCACE,iCACGA,GAAYA,EAASiC,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OACvD,qBAAKC,IAAMhC,OAGb,uBAAMiC,SAAWzB,EAAjB,UACE,uBAAO0B,WAAS,EAACC,YAAa,qBAAsBC,MAAQxC,EAAYyC,SAAU,SAAC5B,GAAD,OAAOZ,EAAaY,EAAE6B,OAAOF,UAC/G,wBAAQG,KAAK,SAAb,gCAMR,SAASV,EAAYW,GACnB,MAA6CA,EAAMV,QAA3CX,EAAR,EAAQA,KAAMP,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,SAAUC,EAA7B,EAA6BA,YACvB2B,EAAe7B,IAAQjC,EAAKgC,YAAYC,IAAM,OAAS,WAE7D,OACE,sBAAK8B,UAAS,kBAAcD,GAA5B,UACE,qBAAKE,IAAM9B,EAAW+B,IAAI,WAC1B,8BAAK9B,EAAL,KAAsBK,QAKb0B,MAnGf,WACE,MAAeC,YAAanE,GAArBoE,EAAP,oBAEA,OACE,sBAAKL,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,oCAGA,kCACIK,EAAO,cAAC7D,EAAD,IAAe,cAACL,EAAD,UCpBjBmE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5dfd4eaf.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\n\n// firebase sdk\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBrbQbnUZmYNLtp4raiFoZZCiC3b1IbVhU\",\n  authDomain: \"minichat-jvt.firebaseapp.com\",\n  projectId: \"minichat-jvt\",\n  storageBucket: \"minichat-jvt.appspot.com\",\n  messagingSenderId: \"394826412413\",\n  appId: \"1:394826412413:web:fb270f8d153a6945455c14\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Minichat! ðŸ¦†\n      </header>\n      <section>\n        { user ? <ChatRoom /> : <SignIn /> }\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <button onClick={ signInWithGoogle }>Sign in with Google</button>\n  )\n}\n\n// function SignOut() {\n//   return auth.currentUser && (\n//     <button onClick={ () => auth.signOut() }>Sign Out</button>\n//   )\n// }\n\nfunction ChatRoom() {\n\n  const msgLimit = 100;\n  const messagesRef = firestore.collection('messages');\n  // const messagesRef = firestore.collection('testes');\n  const query = messagesRef.orderBy('createdAt').limit(msgLimit);\n  const [messages] = useCollectionData(query, { idField: 'id' });\n  const [formValue, setFormValue] = useState('');\n  const [counter, setCounter] = useState(0);\n  const dummy = useRef();\n\n  const updateCounter = async(c) => {\n    await messagesRef.doc(\"counter\").set({current: c});\n  }\n  \n  const sendMessage = async(e) => {\n    e.preventDefault();\n    const { uid, photoURL, displayName } = auth.currentUser;\n    const fetchCounter = messagesRef.doc(\"counter\");\n    fetchCounter.get().then((c) => {\n      setCounter(c.data().current);\n    })\n    await messagesRef.doc(counter.toString()).set({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n      displayName\n    });\n    setFormValue('');\n    (counter === msgLimit - 1) ? updateCounter(0) : updateCounter(counter + 1);\n  }\n  \n  useEffect(() => {\n    const scrollDown = () => {\n      dummy.current.scrollIntoView({ behavior: 'smooth' });\n    }\n    scrollDown();\n  }, [messages]);\n  \n  return (\n    <>\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n        <div ref={ dummy }></div>\n      </main>\n\n      <form onSubmit={ sendMessage }>\n        <input autoFocus placeholder={\"Envie uma mensagem\"} value={ formValue } onChange={(e) => setFormValue(e.target.value)} />\n        <button type=\"submit\">ðŸ’¬</button>\n      </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL, displayName } = props.message;\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={`message ${ messageClass }`}>\n      <img src={ photoURL } alt=\"avatar\" />\n      <p>{ displayName }: { text }</p>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}